# ФАЙЛ: docker-compose.yml (корень репозитория)
services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}
    ports: ["5432:5432"]
    volumes: ["pgdata:/var/lib/postgresql/data"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-postgres}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"

  mongo:
    image: mongo:6
    ports: ["27017:27017"]
    volumes: ["mongodata:/data/db"]

  app:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    env_file: .env
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
      rabbitmq: { condition: service_started }
      mongo: { condition: service_started }
    ports: ["8000:8000"]
    volumes:
      - ./logs/app:/var/log/app

  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    env_file: .env
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
      rabbitmq: { condition: service_started }
    volumes:
      - ./logs/worker:/var/log/worker

  tests:
    build:
      context: .
      dockerfile: docker/Dockerfile.test
    env_file: .env
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
      rabbitmq: { condition: service_started }
      mongo: { condition: service_started }

volumes:
  pgdata:
  mongodata:
