param([switch]$Rebuild)


$ErrorActionPreference = "Stop"

function Test-Docker {
  try {
    docker version | Out-Null
    return $true
  } catch {
    return $false
  }
}

function Ensure-Docker {
  if (Test-Docker) { return }

  Write-Host "üê≥ Docker Desktop –Ω–µ –∑–∞–ø—É—â–µ–Ω ‚Äî –ø—Ä–æ–±—É—é —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å..." -ForegroundColor Yellow
  $dockerExe = "C:\Program Files\Docker\Docker\Docker Desktop.exe"
  if (Test-Path $dockerExe) {
    Start-Process -FilePath $dockerExe | Out-Null
  } else {
    throw "–ù–µ –Ω–∞–π–¥–µ–Ω Docker Desktop: $dockerExe"
  }

  # –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–º–æ–Ω–∞ (–¥–æ ~90 —Å–µ–∫)
  $deadline = (Get-Date).AddSeconds(90)
  do {
    Start-Sleep -Seconds 3
    if (Test-Docker) { return }
  } while ((Get-Date) -lt $deadline)

  throw "Docker Desktop –Ω–µ —É—Å–ø–µ–ª —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å: –¥–µ–º–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
}

function Get-Health($name) {
  $id = docker ps -a --format "{{.Names}}" | Where-Object { $_ -like "*$name*" } | Select-Object -First 1
  if (-not $id) { return "not-found" }
  try {
    $hc = docker inspect --format='{{.State.Health.Status}}' $id 2>$null
    if ($hc) { return $hc } else { return "running" } # –µ—Å–ª–∏ healthcheck –Ω–µ –∑–∞–¥–∞–Ω
  } catch {
    return "unknown"
  }
}

# --- —Å—Ç–∞—Ä—Ç ---
Ensure-Docker

if ($Rebuild) {
  Write-Host "üîÑ –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..." -ForegroundColor Yellow
  docker compose build --no-cache | Out-Null
}

Write-Host "üöÄ –ó–∞–ø—É—Å–∫–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã (detached)..." -ForegroundColor Yellow
docker compose up -d | Out-Null

# –ñ–¥—ë–º –±–∞–∑–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
$services = @("db","redis","mongo","rabbitmq","app","worker")
Write-Host "`n‚è≥ –ñ–¥—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (healthcheck)..." -ForegroundColor Yellow
$deadline = (Get-Date).AddMinutes(3)
do {
  Start-Sleep -Seconds 3
  $states = @{}
  foreach ($s in $services) { $states[$s] = Get-Health $s }
  $allDone = ($states.Values -notcontains "starting") -and ($states.Values -notcontains "unhealthy")
} while (-not $allDone -and (Get-Date) -lt $deadline)

Write-Host "`n=== –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ ==="
foreach ($kvp in $states.GetEnumerator()) {
  $name = $kvp.Key; $st = $kvp.Value
  if ($st -eq "healthy" -or $st -eq "running") {
    Write-Host ("‚úÖ {0}: {1}" -f $name, $st) -ForegroundColor Green
  } elseif ($st -eq "starting") {
    Write-Host ("‚è≥ {0}: {1}" -f $name, $st) -ForegroundColor Yellow
  } else {
    Write-Host ("‚ùå {0}: {1}" -f $name, $st) -ForegroundColor Red
  }
}

Write-Host "`n–õ–æ–≥–∏: .\logs\app\app.log –∏ .\logs\worker\worker.log" -ForegroundColor Cyan
